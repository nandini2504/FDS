
/*


A palindrome is a string of character that‘s the same forward and backward. Typically, punctuation, capitalization, 
and spaces are ignored. For example, “Poor Dan is in a droop” is a palindrome, as can be seen by examining the characters
“poor danisina droop” and observing that they are the same forward and backward. One way to check for a palindrome is to reverse
the characters in the string and then compare with them the original-in a palindrome, the sequence will be identical. Write C++ program 
with functions- 
a) To print original string followed by reversed string using stack 
b) To check whether given string is palindrome or not

*/

#include<iostream>
#include<string.h>
#define max 50
using namespace std;

class STACK
{
private:
    char a[max];
    int top;

public:
    STACK() : top(-1) {}

    void push(char c)
    {
        a[++top] = c;
        a[top + 1] = '\0';

        cout << endl << c << " is pushed on stack ...";
    }

    void reverse()
    {
        cout << "\n\nReverse string is : ";
        for (int i = top; i >= 0; i--)
        {
            cout << a[i];
        }
        cout << endl;
    }

    void convert(char str[])
    {
        for (int i = 0; str[i] != '\0'; i++)
        {
            if (isalpha(str[i]))
            {
                str[i] = tolower(str[i]);
            }
        }
        cout << endl << "Converted String : " << str << "\n";
    }

    void palindrome()
    {
        char str[max];
        int j = 0;

        for (int i = top; i >= 0; i--, j++)
        {
            str[j] = a[i];
        }
        str[j] = '\0';

        cout << "\n\nString is " << (strcmp(str, a) == 0 ? "palindrome" : "not palindrome") << "...";
    }
};

int main()
{
    STACK stack;
    char str[max];

    cout << "\nEnter string to be reversed and check if it's palindrome or not: \n\n";
    cin.getline(str, 50);

    stack.convert(str);

    for (int i = 0; str[i] != '\0'; i++)
    {
        stack.push(str[i]);
    }

    stack.palindrome();
    stack.reverse();
}