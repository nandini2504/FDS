Write a Python program to store roll numbers of student array who attended training program in sorted order. 
Write function for searching whether particular student attended training program or not, 
using Binary search and Fibonacci search

# code for binary search

def binary_search(arr, x):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = left + (right - left) // 2

        # Check if x is present at the mid
        if arr[mid] == x:
            return True
        # If x is greater, ignore left half
        elif arr[mid] < x:
            left = mid + 1
        # If x is smaller, ignore right half
        else:
            right = mid - 1

    return False


def insert_sorted_roll_numbers(roll_numbers, roll_number):
    # Assuming roll_numbers is already sorted
    roll_numbers.append(roll_number)
    roll_numbers.sort()  # Sorting the roll numbers after insertion


# Example roll numbers of students who attended the training program
attended_roll_numbers = [2, 5, 8, 10, 15, 20, 25, 30]

# Function to check if a specific roll number attended the program
def check_attendance(roll):
    return binary_search(attended_roll_numbers, roll)


# Test the function
roll_number_to_check = 15
if check_attendance(roll_number_to_check):
    print(f"Roll number {roll_number_to_check} attended the training program.")
else:
    print(f"Roll number {roll_number_to_check} did not attend the training program.")


# code for Fibonacci search

def fibonacci_search(arr, x):
    fib_n_minus_2 = 0
    fib_n_minus_1 = 1
    fib = fib_n_minus_1 + fib_n_minus_2

    while fib < len(arr):
        fib_n_minus_2 = fib_n_minus_1
        fib_n_minus_1 = fib
        fib = fib_n_minus_1 + fib_n_minus_2

    offset = -1

    while fib > 1:
        i = min(offset + fib_n_minus_2, len(arr) - 1)

        if arr[i] == x:
            return i
        elif arr[i] < x:
            fib = fib_n_minus_1
            fib_n_minus_1 = fib_n_minus_2
            fib_n_minus_2 = fib - fib_n_minus_1
            offset = i
        else:
            fib = fib_n_minus_2
            fib_n_minus_1 = fib_n_minus_1 - fib_n_minus_2
            fib_n_minus_2 = fib - fib_n_minus_1

    if fib_n_minus_1 and arr[offset + 1] == x:
        return offset + 1

    return -1

def insert_sorted(arr, roll):
    # Assuming the array is already sorted
    # If not, sorting logic can be added here before insertion
    arr.append(roll)
    arr.sort()

# Example usage:
roll_numbers = [12, 23, 34, 45, 56, 67, 78, 89]
insert_sorted(roll_numbers, 50)  # Inserting a new roll number (50)
print("Sorted Roll Numbers:", roll_numbers)

# Search for a specific roll number using Fibonacci Search
roll_to_search = 45
result_fibonacci = fibonacci_search(roll_numbers, roll_to_search)
if result_fibonacci != -1:
    print(f"Roll number {roll_to_search} attended the program (Fibonacci Search).")
else:
    print(f"Roll number {roll_to_search} did not attend the program (Fibonacci Search).")